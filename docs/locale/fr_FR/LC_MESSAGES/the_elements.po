msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-16 10:37+0000\n"
"PO-Revision-Date: 2020-07-16 11:07\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: fr_FR\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Les éléments de Qiskit"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra, l'élément \"terre\", est la fondation sur laquelle repose le reste de Qiskit. Terra fournit un socle pour la composition de programmes quantiques au niveau des circuits et des impulsions, pour les optimiser aux contraintes d'un système particulier, et pour gérer l'exécution d'expériences sur des systèmes distants. Terra définit les interfaces de l'utilisateur final, ainsi que le traitement efficace des couches d'optimisation, d'ordonnancement des impulsions et de communication au système."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra est organisé en six modules principaux:"

#: ../../the_elements.rst:25
msgid ":mod:`qiskit.circuit` A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr ""

#: ../../the_elements.rst:34
msgid ":mod:`qiskit.pulse` A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr ""

#: ../../the_elements.rst:40
msgid ":mod:`qiskit.transpiler` A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr ""

#: ../../the_elements.rst:49
msgid ":mod:`qiskit.providers` Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr ""

#: ../../the_elements.rst:53
msgid "A ``Provider`` is an entity that implements the abstract base class :class:`~qiskit.providers.BaseProvider` and provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr ""

#: ../../the_elements.rst:59
msgid "A ``Backend`` is an entity that implements the abstract base class :class:`~qiskit.providers.Backend` represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr ""

#: ../../the_elements.rst:66
msgid "``Job`` instances are implementations of the abstract base class :class:`~qiskit.providers.BaseJob` and can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr ""

#: ../../the_elements.rst:71
msgid ":class:`~qiskit.result.Result` Once the job has finished Terra allows the results to be obtained from the remote backends using ``result = job.result()``. This result object holds the quantum data and the most common way of interacting with it is by using ``result.get_counts(circuit)``. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr ""

#: ../../the_elements.rst:79
msgid ":mod:`qiskit.quantum_info` To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr ""

#: ../../the_elements.rst:85
msgid ":mod:`qiskit.visualization` In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (:func:`~qiskit.visualization.plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function :func:`~qiskit.visualization.plot_state` and :func:`~qiskit.visualization.plot_bloch_vector` that allow the plotting of a quantum state."
msgstr ""

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, l'élément \"air\", est partout dans Qiskit. Pour accélérer le développement des ordinateurs quantiques, nous avons besoin de meilleurs simulateurs, émulateurs et débogueurs. Aer nous aide à comprendre les limites des processeurs classiques en démontrant jusque ou ils peuvent imiter le calcul quantique. De plus, nous pouvons utiliser Aer pour vérifier que les ordinateurs quantiques actuels fonctionnent correctement. Cela peut se faire en pousaant les limites de la simulation en simulant les effets du bruit réèl sur le calcul."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer fournit un environnement de simulation haute performance pour les circuits quantiques à l'aide de la suite logiciele Qiskit. Il contient un simulateur C++ optimisé pour l'exécution de circuits compilés dans Terra. Aer fournit également des outils pour construire des modèles de bruit hautement configurables pour effectuer des simulations bruyantes et réalistes des erreurs qui se produisent lors de l'exécution sur des dispositifs réels."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer inclut trois simulateurs haute performance:"

#: ../../the_elements.rst:126
msgid ":class:`~qiskit.providers.aer.QasmSimulator`"
msgstr ""

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Permet l'exécution multi-coups idéale ou bruyante de circuits qiskit et retourne les compteurs ou le contenu de la mémoire. Il y a plusieurs méthodes qui peuvent être utilisées pour simuler différents circuits plus efficacement. Celles-ci incluent:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "* stateVecteur *-Utilise une simulation dense de vecteur d'état."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilisateur* - Utilise un simulateur d'état stabilisateur Clifford qui n'est valide que pour les circuits Clifford et les modèles de bruit."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "*extended_stabilizer* - Utilise un simulateur approximatif qui décompose les circuits en termes d'état stabilisateur, dont le nombre augmente avec le nombre de portes non-Clifford."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "*matrix_product_state* - Utilise un simulateur d'état du produit de la matrice (MPS)."

#: ../../the_elements.rst:130
msgid ":mod:`~qiskit.providers.aer.StatevectorSimulator`"
msgstr ""

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Permet l'exécution idéale unique (single-shot) de circuits qiskit et retourne le vecteur d'état (statevector) final du simulateur."

#: ../../the_elements.rst:136
msgid ":mod:`~qiskit.providers.UnitarySimulator`"
msgstr ""

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Permet l'exécution idéale unitaire (single-shot) de circuit qiskit et retourne la dernière matrice unitaire du circuit lui-même. Notez que le circuit ne peut pas contenir des opérations de mesure ou de réinitialisation pour ce système d'exécution."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, l'élément \"feu\", est dédié au combat contre le bruit et les erreurs et à la construction de nouvelles approches. Cela comprend une meilleure caractérisation des erreurs, l'amélioration des portes et le calcul en présence de bruit. Ignis est destiné à ceux qui veulent concevoir des codes de correction d'erreurs quantiques, ou qui souhaitent étudier la façon de caractériser les erreurs par des méthodes telles que la tomographie, ou même pour trouver une meilleure façon d'utiliser des portes en explorant le découplage dynamique et le contrôle optimal."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis fournit le code permettant aux utilisateurs de générer facilement des circuits pour des expériences spécifiques, compte tenu d'un ensemble minimal de paramètres d'entrée utilisateur. Le code d'Ignis contient trois blocs fondamentaux:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "** Circuits**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "Le module de circuits fournit le code permettant de générer la liste des circuits pour une expérience d'Ignis particulière basée sur un ensemble minimal de paramètres utilisateur. Ils sont ensuite exécutés sur Terra ou Aer."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "** Raccords (Fitters)**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "Les résultats d'une expérience d'Ignis sont transmis au module de raccords (Fitters) où ils sont analysés et adaptés selon le modèle physique décrivant l'expérience. Les raccords (fitters) peuvent déterminer les données et leur ajustement et fournir en sortie une liste de paramètres."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "** Filtres**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Pour certaines expériences d'Ignis, les raccords (fitters) peuvent générer un objet Filter. Les filtres peuvent être utilisés pour atténuer les erreurs dans d'autres expériences en utilisant les résultats d'étalonnage d'une expérience d'Ignis."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis est organisé en trois types d'expériences qui peuvent être réalisées:"

#: ../../the_elements.rst:173
msgid ":mod:`qiskit.ignis.characterization` Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr ""

#: ../../the_elements.rst:178
msgid ":mod:`qiskit.ignis.verification` Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr ""

#: ../../the_elements.rst:184
msgid ":mod:`qiskit.ignis.mitigation` Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr ""

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, l'élément \"eau\", est l'élément de la vie. Pour que l'informatique quantique soit à la hauteur des attentes, nous devons trouver des utilisations concrètes. Aqua est l'endroit où sont construits les algorithmes des ordinateurs quantiques. Ces algorithmes peuvent être utilisés pour construire des applications pour l'informatique quantique. Aqua est accessible aux experts de domaines de la chimie, de l'optimisation, des finances et de l'IA, qui veulent explorer les avantages de l'utilisation d'ordinateurs quantiques comme accélérateurs pour des tâches informatiques spécifiques."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Les problèmes qui peuvent bénéficier de la puissance de l'informatique quantique ont été identifiés dans de nombreux domaines, tels que la chimie, l'intelligence artificielle (IA), l'optimisation et les finances. Toutefois, l'informatique quantique nécessite des compétences très spécialisées. Pour répondre aux besoins des nombreux praticiens qui veulent utiliser et contribuer à l'informatique quantique à différents niveaux de la pile logicielle, nous avons créé Qiskit Aqua."

