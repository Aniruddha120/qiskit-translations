msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-09 12:18+0000\n"
"PO-Revision-Date: 2020-07-14 08:44\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/the_elements.po\n"
"X-Crowdin-File-ID: 7220\n"
"Language: it_IT\n"

#: ../../the_elements.rst:5
msgid "The Qiskit Elements"
msgstr "Gli Elementi di Qiskit"

#: ../../the_elements.rst:14
msgid "Terra"
msgstr "Terra"

#: ../../the_elements.rst:16
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "Terra, l’elemento “terra”, è il fondamento su cui poggia il resto di Qiskit. Terra fornisce una base per comporre programmi quantistici a livello di circuiti e pulsazioni, ottimizzarli per i vincoli di un particolare dispositivo, e per gestire l'esecuzione di lotti di esperimenti su dispositivi di accesso remoto. Terra definisce le interfacce per l'esperienza utente finale desiderata, così come la gestione efficiente degli strati di ottimizzazione, pianificazione degli impulsi e comunicazione con il backend."

#: ../../the_elements.rst:23
msgid "Qiskit Terra is organized in six main modules:"
msgstr "Qiskit Terra e' diviso in sei moduli principali:"

#: ../../the_elements.rst:25
msgid "`Circuit <https://qiskit.org/documentation/apidoc/circuit.html>`__ A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr "Il `Circuito <https://qiskit.org/documentation/apidoc/circuit.html>`__ Un circuito quantistico è un modello per il calcolo quantistico in cui si effettua un calcolo eseguendo una sequenza di operazioni quantistiche (di solito i gates) su un registro di qubit. Un circuito quantistico di solito inizia con i qubit nel :math:`<unk> 0,…, >` stato e i gates evolvono i qubit in stati che non possono essere rappresentati in modo efficiente su un computer classico. Per estrarre le informazioni sullo stato un circuito quantistico deve avere una misurazione che mappi i risultati (possibile casuale a causa della natura fondamentale dei sistemi quantistici) ai registri classici che possono essere rappresentati in modo efficiente."

#: ../../the_elements.rst:34
msgid "`Pulse <https://qiskit.org/documentation/apidoc/pulse.html>`__ A pulse schedule is set of pulses which are sent to a quantum experiment that are applied to a channel (experimental input line). This is a lower level than circuits and requires each gate in the circuit to be  represented as a set of pulses. At this level the experiments can be designed to reduce errors (dynamical decoupling, error mitigation, and optimal pulse shapes)."
msgstr "Il `Pulse <https://qiskit.org/documentation/apidoc/pulse.html>`__ Una pianificazione dell'impulso è un insieme di impulsi inviati a un esperimento quantistico che vengono applicati a un canale (linea di ingresso sperimentale). Questo è un livello inferiore rispetto ai circuiti e richiede che ogni gate nel circuito sia rappresentato come un insieme di impulsi. A questo livello gli esperimenti possono essere progettati per ridurre gli errori (disaccoppiamento dinamico, attenuazione degli errori e forme ottimali di impulso)."

#: ../../the_elements.rst:40
msgid "`Transpiler <https://qiskit.org/documentation/apidoc/transpiler.html>`__ A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr "Il `Transpiler <https://qiskit.org/documentation/apidoc/transpiler.html>`__ La maggior parte della ricerca sul Quantum Computing si sta impegnando nel capire come lanciare circuiti quantistici sui device reali. In questi dispositivi, gli errori sperimentali e la decoerenza introducono errori durante il calcolo. Pertanto, per ottenere una robusta implementazione è essenziale ridurre il numero di gates e il tempo di funzionamento complessivo del circuito quantistico. Il transpiler introduce il concetto di pass-manager per consentire agli utenti di esplorare l'ottimizzazione e trovare circuiti quantistici più in linea con il loro algoritmo. Questo sistema è chiamato transpiler perché il risultato finale è ancora un circuito."

#: ../../the_elements.rst:49
msgid "`Providers <https://qiskit.org/documentation/apidoc/providers.html>`__ Once the user has made the circuits to run on the backend they need to have a convenient way of working with it. In Terra we do this using four parts:"
msgstr "Il `Provider <https://qiskit.org/documentation/apidoc/providers.html>`__ Una volta che l'utente ha fatto funzionare i circuiti sul backend, c'è bisogno di un modo conveniente per poter lavorare con essi. In Terra lo facciamo utilizzando quattro parti:"

#: ../../the_elements.rst:53
msgid "A `Provider <https://qiskit.org/documentation/api/qiskit.providers.BaseProvider.html>`__ is an entity that provides access to a group of different backends (for example, backends available through the `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "Un `Provider <https://qiskit.org/documentation/api/qiskit.providers.BaseProvider.html>`__ è un'entità che fornisce l'accesso a un gruppo di backend diversi (per esempio, backend disponibili attraverso `IBM Quantum Experience <https://quantum-computing.ibm.com>`__). Il Provider interagisce con backend per scoprire, ad esempio, quali sono disponibili, o per recuperare un'istanza di un particolare backend."

#: ../../the_elements.rst:59
msgid "`Backend <https://qiskit.org/documentation/api/qiskit.providers.BaseBackend.html>`__ represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "Il `Backend <https://qiskit.org/documentation/api/qiskit.providers.BaseBackend.html>`__ può rappresentare o un simulatore o un vero e proprio computer quantistico; entrambi sono responsabili dell'esecuzione di circuiti quantistici e del ritorno dei risultati. Hanno un metodo di esecuzione che prende in un `qobj` come input e restituisce un oggetto `BaseJob`. Questo oggetto permette l'esecuzione asincrona dei processi per recuperare i risultati da un backend quando il lavoro è completato."

#: ../../the_elements.rst:65
msgid "`Job <https://qiskit.org/documentation/api/qiskit.providers.BaseJob.html>`__ instances can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr "La `Job <https://qiskit.org/documentation/api/qiskit.providers.BaseJob.html>`__ instance può essere pensata come il “ticket” per un lavoro sottomesso al sistema. Esso evidenzia lo stato di una esecuzione in un dato momento (per esempio, se il lavoro è in coda, in esecuzione, o è fallito) e consentire anche il controllo sul lavoro."

#: ../../the_elements.rst:70
msgid "`Result <https://qiskit.org/documentation/stubs/qiskit.result.Result.html>`__. Once the job has finished Terra allows the results to be obtained from the remote backends using `result = job.result()`. This result object holds the quantum data and the most common way of interacting with it is by using `result.get_counts(circuit)`. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum information tools provided by Terra."
msgstr "Il `Risultato <https://qiskit.org/documentation/stubs/qiskit.result.Result.html>`__. Una volta terminato il processo, Terra permette di ottenere i risultati dai backend remoti usando `result = job.result()`. Il risultato contiene i dati quantistici ed il modo più comune di interagire con lui è quello di usare `result.get_counts(nome_circuito)`. Questo metodo consente all'utente di ottenere una stima grezza dal circuito quantistico che può essere utilizzata per ulteriori analisi con gli strumenti di informazione quantistica forniti da Terra."

#: ../../the_elements.rst:78
msgid "`Quantum Information <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ To perform more advanced algorithms and analysis of the circuits run on the quantum computer, it is important to have tools to implement simple quantum information tasks. These include methods to both estimate metrics and generate quantum states, operations, and channels."
msgstr "§ Quantum Information <https://qiskit.org/documentation/apidoc/quantum_info.html>` __ Per eseguire algoritmi e analisi più avanzate dei circuiti quantistici, è importante disporre di strumenti per implementare semplici attività di informazione quantistica. Questi includono metodi per stimare le metriche e generare stati quantistici, operazioni e canali."

#: ../../the_elements.rst:84
msgid "`Visualization <https://qiskit.org/documentation/apidoc/visualization.html>`__ In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (`plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function `plot_state` and `plot_bloch_vector` that allow the plotting of a quantum state. These functions are usually only used when using the `statevector_simulator` backend but can also be used on real data after running state tomography experiments (Ignis)."
msgstr "`Visualizzazione <https://qiskit.org/documentation/apidoc/visualization.html>`__ In Terra vi sono molti strumenti per visualizzare un circuito quantistico. Ciò consente una rapida ispezione del circuito per assicurarsi che sia quello che l'utente ha voluto implementare. C'è una versione testo, Python e LaTeX. Una volta eseguito il circuito, è importante essere in grado di visualizzare l'output. C'è una funzione semplice (`plot_histogram`) per tracciare i risultati di un circuito quantistico compresa una versione interattiva. C'è anche una funzione `plot_state` e `plot_bloch_vector` che permettono il tracciamento di uno stato quantistico. Queste funzioni sono solitamente usate solo quando si utilizza il backend `statevector_simulator` ma possono anche essere usate su dati reali dopo aver eseguito esperimenti di tomografia a stato (Ignis)."

#: ../../the_elements.rst:98
msgid "Aer"
msgstr "Aer"

#: ../../the_elements.rst:100
msgid "Aer, the ‘air’ element, permeates all Qiskit elements. To really speed up development of quantum computers we need better simulators, emulators and debuggers. Aer helps us understand the limits of classical processors by demonstrating to what extent they can mimic quantum computation. Furthermore, we can use Aer to verify that current and near-future quantum computers function correctly. This can be done by stretching the limits of simulation, and by simulating the effects of realistic noise on the computation."
msgstr "Aer, l’elemento “aria”, permea tutti gli elementi di Qiskit. Per velocizzare lo sviluppo dei computer quantistici abbiamo bisogno di migliori simulatori, emulatori e debugger. Aer ci aiuta a capire i limiti dei processori classici, dimostrando in che misura possono imitare il calcolo quantistico. Inoltre, possiamo usare Aer per verificare che i computer quantistici attuali e quasi futuri funzionino correttamente. Questo può essere fatto allungando i limiti della simulazione, e simulando gli effetti del rumore realistico sul calcolo."

#: ../../the_elements.rst:107
msgid "Aer provides a high performance simulator framework for quantum circuits using the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Terra. Aer also provides tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices."
msgstr "Aer fornisce un framework di simulazione ad alte prestazioni per circuiti quantistici utilizzando lo stack software di Qiskit. Contiene un backend scritto in C++ ottimizzato per l'esecuzione di circuiti compilati in Terra. Aer fornisce anche strumenti per costruire modelli di rumore, altamente configurabili, per eseguire simulazioni rumorose realistiche degli errori che si verificano durante l'esecuzione su dispositivi reali."

#: ../../the_elements.rst:113
msgid "Qiskit Aer includes three high performance simulator backends:"
msgstr "Qiskit Aer include tre simulatori backend ad alte prestazioni:"

#: ../../the_elements.rst:126
msgid "`Qasm Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.QasmSimulator.html>`__"
msgstr "`Qasm Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.QasmSimulator.html>`__"

#: ../../the_elements.rst:116
msgid "Allows ideal and noisy multi-shot execution of qiskit circuits and returns counts or memory. There are multiple methods that can be used that simulate different circuits more efficiently. These include:"
msgstr "Permette l'esecuzione multi-shot ideale e rumorosa dei circuiti di Qiskit e restituisce conteggi o memoria. Ci sono più metodi che possono essere utilizzati che simulano i diversi circuiti in modo più efficiente. Questi includono:"

#: ../../the_elements.rst:120
msgid "*statevector* - Uses a dense statevector simulation."
msgstr "* statevector * - Utilizza una densa simulazione statevector."

#: ../../the_elements.rst:121
msgid "*stabilizer* - Uses a Clifford stabilizer state simulator that is only valid for Clifford circuits and noise models."
msgstr "*stabilizer* - Utilizza uno stabilizzatore Clifford di simulatori di stato che è valido solo per i circuiti Clifford e per i modelli di rumore."

#: ../../the_elements.rst:123
msgid "*extended_stabilizer* - Uses an approximate simulator that decomposes circuits into stabilizer state terms, the number of which grows with the number of non-Clifford gates."
msgstr "* extended_stabilizer * - Utilizza un simulatore approssimativo che decompone i circuiti in termini di stati stabilizzatori, il cui numero cresce con il numero di porte non Clifford."

#: ../../the_elements.rst:126
msgid "*matrix_product_state* - Uses a Matrix Product State (MPS) simulator."
msgstr "* matrix_product_state * - Utilizza un simulatore MPS (Matrix Product State)."

#: ../../the_elements.rst:130
msgid "`Statevector Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.StatevectorSimulator.html>`__"
msgstr "` Simulatore Statevector <https://qiskit.org/documentation/stubs/qiskit.providers.aer.StatevectorSimulator.html>` __"

#: ../../the_elements.rst:129
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final statevector of the simulator after application."
msgstr "Consente l'esecuzione ideale di circuiti Qiskit e restituisce lo statevector finale del simulatore dopo l'applicazione."

#: ../../the_elements.rst:136
msgid "`Unitary Simulator <https://qiskit.org/documentation/stubs/qiskit.providers.aer.UnitarySimulator.html>`__"
msgstr "`Simulatore unitario <https://qiskit.org/documentation/stubs/qiskit.providers.aer.UnitarySimulator.html>`__"

#: ../../the_elements.rst:133
msgid "Allows ideal single-shot execution of qiskit circuits and returns the final unitary matrix of the circuit itself. Note that the circuit cannot contain measure or reset operations for this backend."
msgstr "Consente l'esecuzione ideale di circuiti Qiskit e restituisce la matrice unitaria finale del circuito stesso. Da notare che il circuito non può contenere operazioni di misura o di reset per questo backend."

#: ../../the_elements.rst:142
msgid "Ignis"
msgstr "Ignis"

#: ../../the_elements.rst:144
msgid "Ignis, the ‘fire’ element, is dedicated to fighting noise and errors and to forging a new path. This includes better characterization of errors, improving gates, and computing in the presence of noise. Ignis is meant for those who want to design quantum error correction codes, or who wish to study ways to characterize errors through methods such as tomography, or even to find a better way for using gates by exploring dynamical decoupling and optimal control."
msgstr "Ignis, l’elemento “fuoco”, è dedicato a combattere contro il rumore e gli errori e alla formazione di un nuovo percorso. Ciò include una migliore caratterizzazione degli errori, il miglioramento dei gate e il calcolo in presenza di rumore. Ignis è destinato a coloro che vogliono progettare codici di correzione degli errori quantistici, o che desiderano studiare modi per caratterizzare gli errori attraverso metodi come la tomografia, o anche trovare un modo migliore per utilizzare i gate esplorando il disaccoppiamento dinamico e il controllo ottimale."

#: ../../the_elements.rst:151
msgid "Ignis provides code for users to easily generate circuits for specific experiments given a minimal set of user input parameters. Ignis code contains three fundamental building blocks:"
msgstr "Ignis fornisce agli utenti il codice per generare facilmente circuiti per esperimenti specifici dato un set minimale di parametri di input dell'utente. Il codice Ignis contiene tre pilastri fondamentali:"

#: ../../the_elements.rst:157
msgid "**Circuits**"
msgstr "**Circuiti**"

#: ../../the_elements.rst:156
msgid "The circuits module provides the code to generate the list of circuits for a particular Ignis experiment based on a minimal set of user parameters. These are then run on Terra or Aer."
msgstr "Il modulo dei circuiti fornisce il codice per generare la lista di circuiti per un particolare esperimento Ignis basato su una serie minimale di parametri dell'utente. Questi vengono poi eseguiti su Terra o Aer."

#: ../../the_elements.rst:162
msgid "**Fitters**"
msgstr "** Fitters**"

#: ../../the_elements.rst:160
msgid "The results of an Ignis experiment are passed to the Fitters module where they are analyzed and fit according to the physics model describing the experiment. Fitters can plot the data plus fit and output a list of parameters."
msgstr "I risultati di un esperimento Ignis vengono trasmessi al modulo Fitters dove vengono analizzati e adattati secondo il modello fisico che descrive l'esperimento. Fitters può generare grafici sui dati e produrre un elenco di parametri."

#: ../../the_elements.rst:167
msgid "**Filters**"
msgstr "**Filtri**"

#: ../../the_elements.rst:165
msgid "For certain Ignis experiments, the fitters can output a Filter object. Filters can be used to mitigate errors in other experiments using the calibration results of an Ignis experiment."
msgstr "Per alcuni esperimenti di Ignis, i Fitters possono emettere un oggetto Filter. I filtri possono essere utilizzati per mitigare gli errori in altri esperimenti utilizzando i risultati di calibrazione di un esperimento Ignis."

#: ../../the_elements.rst:169
msgid "Qiskit Ignis is organized into three types of experiments that can be performed:"
msgstr "Qiskit Ignis è organizzato in tre tipi di esperimenti che possono essere eseguiti:"

#: ../../the_elements.rst:176
msgid "`Characterization <https://qiskit.org/documentation/apidoc_legacy/ignis/characterization/characterization.html>`__"
msgstr "` Caratterizzazione <https://qiskit.org/documentation/apidoc_legacy/ignis/characterization/characterization.html>` __"

#: ../../the_elements.rst:174
msgid "Characterization experiments are designed to measure parameters in the system such as noise parameters (T1, T2-star, T2), Hamiltonian parameters such as the ZZ interaction rate and control errors in the gates."
msgstr "Gli esperimenti di caratterizzazione sono progettati per misurare i parametri nel sistema come i parametri di rumore (T1, T2-star, T2), parametri Hamiltoniani, come il tasso di interazione ZZ e errori di controllo nei gates."

#: ../../the_elements.rst:182
msgid "`Verification <https://qiskit.org/documentation/apidoc_legacy/ignis/verification/verification.html>`__"
msgstr "` Verifica <https://qiskit.org/documentation/apidoc_legacy/ignis/verification/verification.html>` __"

#: ../../the_elements.rst:179
msgid "Verification experiments are designed to verify gate and small circuit performance. Verification includes state and process tomography, quantum volume and randomized benchmarking (RB). These experiments provide the information to determine performance metrics such as the gate fidelity."
msgstr "Gli esperimenti di verifica sono progettati per verificare le prestazioni di porte e piccoli circuiti. La verifica include tomografia di stato e di processo, volume quantico e benchmark randomizzati (RB). Questi esperimenti forniscono informazioni per determinare misure di prestazione come la fedeltà dei gate."

#: ../../the_elements.rst:191
msgid "`Mitigation <https://qiskit.org/documentation/apidoc_legacy/ignis/mitigation/mitigation.html>`__"
msgstr "`Mitigazione <https://qiskit.org/documentation/apidoc_legacy/ignis/mitigation/mitigation.html>`__"

#: ../../the_elements.rst:185
msgid "Mitigation experiments run calibration circuits that are analyzed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend. Ignis code will generate a list of circuits that run calibration measurements. The results of these measurements will be processed by a Fitter and will output a Filter than can be used to apply mitigation to other results."
msgstr "Gli esperimenti di mitigazione eseguono circuiti di calibrazione, i quali vengono analizzati per generare routine di attenuazione che possono poi essere applicate a una serie arbitraria di risultati eseguiti sullo stesso backend. Il codice Ignis genererà un elenco di circuiti che eseguono misurazioni di calibrazione. I risultati di queste misurazioni saranno elaborati da un Fitter e produrranno un Filter che può essere utilizzato per applicare queste attenuazioni ad altri risultati."

#: ../../the_elements.rst:197
msgid "Aqua"
msgstr "Aqua"

#: ../../the_elements.rst:199
msgid "Aqua, the ‘water’ element, is the element of life. To make quantum computing live up to its expectations, we need to find real-world applications. Aqua is where algorithms for quantum computers are built. These algorithms can be used to build applications for quantum computing. Aqua is accessible to domain experts in chemistry, optimization, finance and AI, who want to explore the benefits of using quantum computers as accelerators for specific computational tasks."
msgstr "Aqua, l’elemento “acqua”, è l’elemento della vita. Per far sì che il quantum computing sia all’altezza delle sue aspettative, dobbiamo trovare delle applicazioni nel mondo reale. Aqua è dove vengono costruiti gli algoritmi per i computer quantistici. Questi algoritmi possono essere utilizzati per costruire applicazioni per la computazione quantistico. Aqua è accessibile agli esperti in chimica, ottimizzazione, finanza e IA, che vogliono esplorare i vantaggi di utilizzare computer quantistici come acceleratori per compiti di calcolo specifici."

#: ../../the_elements.rst:207
msgid "Problems that may benefit from the power of quantum computing have been identified in numerous domains, such as Chemistry, Artificial Intelligence (AI), Optimization and Finance. Quantum computing, however, requires very specialized skills. To address the needs of the vast population of practitioners who want to use and contribute to quantum computing at various levels of the software stack, we have created Qiskit Aqua."
msgstr "Problemi che potrebbero trarre beneficio dalla potenza della computazione quantistica sono stati identificati in numerosi domini, ad esempio la Chimica, l'Intelligenza Artificiale (IA), l'Ottimizzazione e la Finanza. Tuttavia la computazione quantistica richiede competenze molto specializzate. Per rispondere alle esigenze della grande popolazione di praticanti che desiderano contribuire alla computazione quantistica a vari livelli dello stack software, abbiamo creato Qiskit Aqua."

